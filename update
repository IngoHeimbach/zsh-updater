#!/usr/bin/env zsh

export UPDATER_ROOT_DIR="${0:h}"


function print_usage () {
    echo "Usage: update [-a] script1 [script2 ... scriptN]"
    echo
    echo "Run the specified update scripts. The special name 'all' runs all available scripts."
    echo
    echo "positional arguments:"
    echo "  script1   The script name(s) to run"
    echo
    echo "optional arguments:"
    echo "  -a   abort if a script fails"
}

function read_options () {
    ABORT_ON_FAIL=0
    while getopts ":a" opt; do
        case ${opt} in
            a)
                ABORT_ON_FAIL=1
                ;;
            \?)
                >&2 echo "Invalid option: '-${OPTARG}'"
                ;&
            *)
                print_usage
                exit 1
                ;;
        esac
    done
    COUNT_OPTIONAL_PARAMETERS="$(( OPTIND - 1 ))"
}

function init_variables () {
    export UPDATER_RC_PATH="${HOME}/.zsh-updaterrc"
    export UPDATER_SCRIPTS_DIR="${UPDATER_ROOT_DIR}/update_scripts"
    export UPDATER_UTILS_DIR="${UPDATER_ROOT_DIR}/utils"
    export UPDATE_ORDER_PATH="${UPDATER_SCRIPTS_DIR}/update_order"
    export UPDATE_EXTRA_DEFINITIONS="${UPDATER_SCRIPTS_DIR}/extra_definitions.zsh"
    [[ -f "${UPDATER_RC_PATH}" ]] || export UPDATER_RC_PATH=""
    if [[ "$(uname)" == "Darwin" ]]; then
        export PLATFORM_MACOS=1
        export PLATFORM_LINUX=0
    else
        export PLATFORM_MACOS=0
        export PLATFORM_LINUX=1
    fi
    if (( ${PLATFORM_LINUX} )); then
        export PLATFORM_LINUX_DISTRO="unknown"
        [[ -f "/etc/redhat-release" ]] && export PLATFORM_LINUX_DISTRO="centos"
        [[ -f "/etc/debian_version" ]] && export PLATFORM_LINUX_DISTRO="debian"
        if uname -a | grep -q "Microsoft"; then
            export PLATFORM_LINUX_WSL=1
        else
            export PLATFORM_LINUX_WSL=0
        fi
        case "${PLATFORM_LINUX_DISTRO}" in
            centos)
                if which lsb_release >/dev/null 2>&1; then
                    export PLATFORM_LINUX_DISTRO_VERSION="$(lsb_release -r | awk '{ print $2 }')"
                    export PLATFORM_LINUX_DISTRO_MAJOR_VERSION="$(echo "${PLATFORM_LINUX_DISTRO_VERSION}" | awk -F'.' '{ print $1 }')"
                else
                    export PLATFORM_LINUX_DISTRO_VERSION="$(sed 's/[^0-9.]*//g' /etc/redhat-release)"
                    if [[ "${PLATFORM_LINUX_DISTRO_VERSION}" > "7" ]]; then
                        export PLATFORM_LINUX_DISTRO_MAJOR_VERSION="7"
                    elif [[ "${PLATFORM_LINUX_DISTRO_VERSION}" > "6" ]]; then
                        export PLATFORM_LINUX_DISTRO_MAJOR_VERSION="6"
                    else
                        export PLATFORM_LINUX_DISTRO_MAJOR_VERSION="5"
                    fi
                fi
                ;;
            debian)
                export PLATFORM_LINUX_DISTRO_CODENAME="$(lsb_release -c | awk '{ print $2 }')"
                export PLATFORM_LINUX_DISTRO_BRANCH="$(lsb_release -r | awk '{ print $2 }')"
                if [[ "${PLATFORM_LINUX_DISTRO_BRANCH}" == "10" ]]; then
                    export PLATFORM_LINUX_DISTRO_BRANCH="testing"
                fi
                ;;
            *)
                ;;
        esac
    fi

    [[ -n "${UPDATER_RC_PATH}" ]] && source "${UPDATER_RC_PATH}"
    source "${UPDATER_UTILS_DIR}/update_utils.zsh"
}

function update_updater_scripts () {
    if [[ "${UPDATER_SCRIPTS_REPO_URL}" == "" ]]; then
        echo "The variable UPDATER_SCRIPTS_REPO_URL is not set. Aborting"
        exit 101
    fi

    print_update "update scripts"
    if [[ "$(cd ${UPDATER_SCRIPTS_DIR} >/dev/null 2>&1 && git remote -v | awk '$1 == "origin" && $3 == "(fetch)" { print $2 }')" == "${UPDATER_SCRIPTS_REPO_URL}" ]]; then
        pushd "${UPDATER_SCRIPTS_DIR}" && \
        git fetch origin && \
        [[ "$(git rev-list --count master...origin/master)" -gt 0 ]] && \
        git reset --hard origin/master && \
        popd
    else
        rm -rf "${UPDATER_SCRIPTS_DIR}"
        git clone "${UPDATER_SCRIPTS_REPO_URL}" "${UPDATER_SCRIPTS_DIR}"
    fi
    [[ -f "${UPDATE_EXTRA_DEFINITIONS}" ]] || export UPDATE_EXTRA_DEFINITIONS=""
    [[ -n "${UPDATE_EXTRA_DEFINITIONS}" ]] && source "${UPDATE_EXTRA_DEFINITIONS}"
}

function read_update_order () {
    if [[ ! -f "${UPDATE_ORDER_PATH}" ]]; then
        echo "The file ${UPDATE_ORDER_PATH} does not exist. Aborting"
        exit 102
    fi
    UPDATE_ORDER=( "${(f)$(<${UPDATE_ORDER_PATH})}" )
}

function run_update_script () (
    UPDATE_SCRIPT_PATH="${UPDATER_SCRIPTS_DIR}/scripts/$1"

    source "${UPDATE_SCRIPT_PATH}"

    export UPDATE_TEMP="$(mktemp -d)"
    (
        update_description
        if ! is_function "update_condition" || update_condition; then
            print_update "${UPDATE_DESCRIPTION_OUTPUT}" "${UPDATE_CONDITION_OUTPUT}"
            cd "${UPDATE_TEMP}" && update_run
            RET="$?"
            [[ "${RET}" -ne 0 ]] && print_abort "${UPDATE_DESCRIPTION_OUTPUT}" "${UPDATE_RUN_OUTPUT}"
            exit "${RET}"
        else
            print_skip "${UPDATE_DESCRIPTION_OUTPUT}" "${UPDATE_CONDITION_OUTPUT}"
            exit
        fi
    )
    RET="$?"
    rm -rf "${UPDATE_TEMP}"
    exit "${RET}"
)

function main () {
    read_options "$@"
    shift "${COUNT_OPTIONAL_PARAMETERS}"
    init_variables
    update_updater_scripts
    if [[ "$1" == "all" ]]; then
        read_update_order
    else
        UPDATE_ORDER=()
        for ENTRY in "$@"; do
            UPDATE_ORDER+=( "${ENTRY}.zsh" )
        done
    fi
    for UPDATE_SCRIPT in "${UPDATE_ORDER[@]}"; do
        run_update_script "${UPDATE_SCRIPT}"
        RET="$?"
        rehash  # rebuild PATH cache
        if [[ "${RET}" -ne 0 ]] && (( ABORT_ON_FAIL )); then
            exit "${RET}"
        fi
    done
    print_summary
}

main "$@"

# vim: ft=zsh:tw=120
